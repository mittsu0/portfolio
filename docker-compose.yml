version: "3.9"
services:
  app:
    # .infra/phpのDockerfileを元にイメージを作成する
    build:
      context: .
      dockerfile: ./infra/php/Dockerfile
    volumes:
      # ./src以下のディレクトリをコンテナの/var/www/htmlにマウント（マウント先ディレクトリがない場合は作成される）
      - ./src:/var/www/html
    # コンテナ内の環境変数を設定
    # コンテナ内の.envファイルに直接記述する必要がなくなる
    environment:
      - APP_DEBUG=${APP_DEBUG}
      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_NAME}
      - DB_USERNAME=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - AWS_BUCKET=${AWS_BUCKET}
      - AWS_USE_PATH_STYLE_ENDPOINT=${AWS_USE_PATH_STYLE_ENDPOINT}
      - AWS_ENDPOINT=${AWS_ENDPOINT}

  web:
    # イメージをそのまま使用
    image: nginx:1.20-alpine
    # nginxへ外(ホスト側)からコンテナ内へアクセスさせるため公開用のポートを設定
    # ホスト側ポート:コンテナ側ポートで指定
    ports:
      - 8080:80
    volumes:
      - ./src:/var/www/html
      - ./infra/nginx/default.conf:/etc/nginx/conf.d/default.conf
    environment:
      - TZ=${TZ:-Asia/Tokyo}
    working_dir: /var/www/html

  db:
    build:
      context: .
      dockerfile: ./infra/mysql/Dockerfile
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      TZ: 'Asia/Tokyo'
    volumes:
      - db-store:/var/lib/mysql

volumes:
  db-store: